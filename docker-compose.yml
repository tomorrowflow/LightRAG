networks:
  lightrag_network:
    driver: bridge

volumes:
  redis_data:
  memgraph_data:

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: lightrag_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-lightrag}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lightrag_password}
      POSTGRES_DB: ${POSTGRES_DB:-lightrag}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - lightrag_network
    ports:
      - "5433:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lightrag}"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.26.0
    container_name: lightrag_neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-neo4j_password}
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*"
    volumes:
      - ./data/neo4j_data:/data
      - ./data/neo4j_logs:/logs
    networks:
      - lightrag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u ${NEO4J_USER:-neo4j} -p ${NEO4J_PASSWORD:-neo4j_password} 'RETURN 1'"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7.0
    container_name: lightrag_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-lightrag}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-lightrag_password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-lightrag}
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - lightrag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:v1.12.5
    container_name: lightrag_qdrant
    volumes:
      - ./data/qdrant:/qdrant/storage
    networks:
      - lightrag_network
    ports:
      - "6334:6333"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "exec 3<>/dev/tcp/127.0.0.1/6333 && echo -e 'GET /readyz HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && grep -q 'HTTP/1.1 200' <&3"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4-alpine
    container_name: lightrag_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-lightrag_password}
    volumes:
      - redis_data:/data
    networks:
      - lightrag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  memgraph:
    image: memgraph/memgraph:2.20.1
    container_name: lightrag_memgraph
    volumes:
      - memgraph_data:/var/lib/memgraph
    networks:
      - lightrag_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo 'RETURN 0;' | mgconsole || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 0s

  lightrag:
    container_name: lightrag
    build:
      context: .
      dockerfile: Dockerfile
      tags:
        - ghcr.io/hkuds/lightrag:latest
    ports:
      - "${PORT:-9621}:9621"
    volumes:
      - ./data/rag_storage:/app/data/rag_storage
      - ./data/inputs:/app/data/inputs
      - ./data/tiktoken:/app/data/tiktoken
      - ./config.ini:/app/config.ini
      - ./.env:/app/.env
    env_file:
      - .env
    environment:
      - TIKTOKEN_CACHE_DIR=/app/data/tiktoken
    networks:
      - lightrag_network
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
      memgraph:
        condition: service_healthy
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"